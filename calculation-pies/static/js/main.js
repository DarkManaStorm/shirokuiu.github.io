/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./static/js/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

	'use strict';
	
	// Select
	
	(function () {
	  var select = document.querySelectorAll('.calculation-select');
	  var selectStep = document.querySelector('.calculation__checkbox-number--step1');
	
	  for (var i = 0, len = select.length; i < len; i++) {
	    select[i].addEventListener('click', function (evt) {
	      var val = this.querySelector('.val-js');
	      var option = evt.target.closest('.option-js');
	
	      this.classList.toggle('calculation-select--close');
	
	      if (option) {
	        val.textContent = option.textContent;
	        selectStep.style.backgroundColor = '#37B84C';
	        selectStep.style.color = '#ffffff';
	      }
	    });
	  }
	})();
	
	// Checkbox
	(function () {
	  var check = document.querySelectorAll('.checkbox-js');
	  var checkStep = document.querySelector('.calculation__checkbox-number--step3');
	
	  for (var i = 0, len = check.length; i < len; i++) {
	    check[i].addEventListener('click', function (evt) {
	      var item = evt.target.closest('.checkbox-item-js');
	      var innerItem = evt.target.closest('.checkbox-item-inner-js');
	      var itemInput = this.querySelector('.checkbox-item-input-js');
	
	      if (item) {
	        if (!itemInput.checked) {
	          itemInput.setAttribute('checked', '');
	          this.classList.remove('calculation__fill-checkbox-wrap--close');
	          checkStep.classList.add('step3-checked');
	        } else {
	          itemInput.removeAttribute('checked', '');
	          this.classList.add('calculation__fill-checkbox-wrap--close');
	        }
	      }
	
	      if (innerItem) {
	        var innerItemInput = innerItem.querySelector('.checkbox-item-inner-input-js');
	        if (!innerItemInput.checked) {
	          innerItemInput.setAttribute('checked', '');
	        } else {
	          innerItemInput.removeAttribute('checked', '');
	        }
	      }
	    });
	  }
	})();
	
	// Table-Cart
	(function () {
	  var table = document.querySelector('.calculation__table');
	  var cart = document.querySelectorAll('.calculation__cart');
	  var select = document.querySelectorAll('.cart-select-js');
	  var fullPrice = document.querySelector('.calculation__table-result-price');
	  var fullCount = document.querySelector('.table-total-price-js ');
	  var step4 = document.querySelector('.calculation__table-step-number--4');
	
	  table.setAttribute('data-total-price', '0');
	  table.setAttribute('data-total-count', '0');
	
	  for (var i = 0, len = select.length; i < len; i++) {
	    select[i].addEventListener('click', function (evt) {
	      var val = this.querySelector('.calculation__cart-select-val');
	      var option = evt.target.closest('.calculation__cart-select-option');
	
	      this.classList.toggle('calculation__cart-select--close');
	
	      if (option) {
	        val.dataset.currentPrice = option.dataset.price;
	        this.dataset.currentPrice = val.dataset.currentPrice;
	        val.textContent = option.textContent;
	      }
	    });
	  }
	
	  for (var i = 0, len = cart.length; i < len; i++) {
	    var cartSelect = cart[i].querySelectorAll('.cart-select-js');
	    var cartPrice = cart[i].querySelectorAll('.calculation__cart-td-price');
	    var cartSum = cart[i].querySelectorAll('.calculation__cart-td-total-price');
	
	    cart[i].setAttribute('data-total-price', '0');
	    cart[i].setAttribute('data-total-count', '1');
	    cart[i].setAttribute('data-basic-price', '0');
	
	    for (var j = 0, jlen = cartPrice.length; j < jlen; j++) {
	      cart[i].dataset.totalPrice = cartSelect[j].dataset.currentPrice;
	      cart[i].dataset.basicPrice = cartSelect[j].dataset.currentPrice;
	      cartPrice[j].textContent = cartSelect[j].dataset.currentPrice;
	      cartSum[j].textContent = cart[i].dataset.totalPrice;
	    }
	
	    table.dataset.totalPrice = parseInt(table.dataset.totalPrice, 10) + parseInt(cart[i].dataset.totalPrice, 10);
	    table.dataset.totalCount = parseInt(table.dataset.totalCount, 10) + parseInt(cart[i].dataset.totalCount, 10);
	
	    cart[i].addEventListener('click', function (evt) {
	      var minus = evt.target.closest('.calculation__incDec-button--minus');
	      var val = this.querySelectorAll('.calculation__incDec-val');
	      var sum = this.querySelectorAll('.calculation__cart-td-total-price');
	      var basicPrice = this.querySelectorAll('.calculation__cart-td-price');
	      var plus = evt.target.closest('.calculation__incDec-button--plus');
	      var remove = evt.target.closest('.calculation__cart-remove-button');
	      var itCartSelect = evt.target.closest('.cart-select-js');
	
	      table.dataset.totalPrice = parseInt(table.dataset.totalPrice, 10) + parseInt(this.dataset.totalPrice, 10);
	
	      if (itCartSelect) {
	        this.dataset.totalPrice = itCartSelect.dataset.currentPrice;
	        this.dataset.basicPrice = itCartSelect.dataset.currentPrice;
	        for (var j = 0, jlen = val.length; j < jlen; j++) {
	          basicPrice[j].textContent = this.dataset.basicPrice;
	          sum[j].textContent = this.dataset.totalPrice;
	        }
	
	        step4.style.backgroundColor = '#37B84C';
	        step4.style.color = '#ffffff';
	      }
	
	      if (minus) {
	        if (parseInt(this.dataset.totalCount, 10) > 1) {
	          for (var j = 0, jlen = val.length; j < jlen; j++) {
	            val[j].textContent = parseInt(val[j].textContent, 10) - 1;
	          }
	          this.dataset.totalPrice = parseInt(this.dataset.totalPrice, 10) - parseInt(this.dataset.basicPrice, 10);
	          this.dataset.totalCount = val[0].textContent;
	          table.dataset.totalPrice = parseInt(table.dataset.totalPrice, 10) - parseInt(this.dataset.basicPrice, 10);
	          table.dataset.totalCount = parseInt(table.dataset.totalCount, 10) - 1;
	          fullPrice.textContent = table.dataset.totalPrice;
	          fullCount.textContent = table.dataset.totalCount;
	          for (var j = 0, jlen = sum.length; j < jlen; j++) {
	            sum[j].textContent = this.dataset.totalPrice;
	          }
	
	          step4.style.backgroundColor = '#37B84C';
	          step4.style.color = '#ffffff';
	        }
	      }
	
	      if (plus) {
	        for (var j = 0, jlen = val.length; j < jlen; j++) {
	          val[j].textContent = parseInt(val[j].textContent, 10) + 1;
	        }
	        this.dataset.totalPrice = parseInt(this.dataset.totalPrice, 10) + parseInt(this.dataset.basicPrice, 10);
	        this.dataset.totalCount = val[0].textContent;
	        table.dataset.totalPrice = parseInt(table.dataset.totalPrice, 10) + parseInt(this.dataset.basicPrice, 10);
	        table.dataset.totalCount = parseInt(table.dataset.totalCount, 10) + 1;
	        fullPrice.textContent = table.dataset.totalPrice;
	        fullCount.textContent = table.dataset.totalCount;
	        for (var j = 0, jlen = sum.length; j < jlen; j++) {
	          sum[j].textContent = this.dataset.totalPrice;
	        }
	
	        step4.style.backgroundColor = '#37B84C';
	        step4.style.color = '#ffffff';
	      }
	
	      if (remove) {
	        this.remove();
	
	        step4.style.backgroundColor = '#37B84C';
	        step4.style.color = '#ffffff';
	      }
	    });
	  }
	
	  fullPrice.textContent = table.dataset.totalPrice;
	  fullCount.textContent = table.dataset.totalCount;
	})();
	
	// Tel
	(function () {
	  var step2 = document.querySelector('.calculation__checkbox-number--step2');
	  var step5 = document.querySelector('.calculation__table-step-number--5');
	  var dataInput = document.querySelectorAll('.calculation__user-data-input');
	
	  for (var i = 0, len = dataInput.length; i < len; i++) {
	    dataInput[i].addEventListener('input', function () {
	      step5.style.backgroundColor = '#37B84C';
	      step5.style.color = '#ffffff';
	    });
	  }
	  $(document).ready(function () {
	    $('.tel-js').mask("+0(000) 000-0000", { placeholder: "+7(_ _ _) _ _ _ - _ _ _ _" });
	
	    $("#ex13").slider({
	      ticks: [0, 100, 200, 300, 400],
	      ticks_labels: ['$0', '$100', '$200', '$300', '$400'],
	      ticks_snap_bounds: 30
	    });
	
	    var myTrack = document.querySelector('.calculation__range-wrap');
	    var myTooltip = document.querySelector('.tooltip');
	
	    myTrack.addEventListener('mouseenter', function () {
	      myTooltip.style.opacity = '1';
	    });
	
	    myTrack.addEventListener('mousemove', function () {
	      if (parseInt(myTooltip.style.left, 10) >= 2) {
	        step2.style.backgroundColor = '#37B84C';
	        step2.style.color = '#ffffff';
	      }
	    });
	
	    myTrack.addEventListener('mouseleave', function () {
	      myTooltip.style.opacity = '0';
	    });
	  });
	})();

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,